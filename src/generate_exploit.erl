-module(generate_exploit).

-export([generate/2]).


generate(generation_based, FileName) ->
    {ok, Data} = file:read_file(FileName),
    Res = erlang:iolist_to_binary(gen_exp(binary:split(Data, [<<"\n">>], [global, trim]), start, [])),
    file:write_file("result.erl", Res).

gen_exp([H|T], State, Acc) ->
    {NewState, AccAdd} = parse_line(binary:split(H, [<<" ">>], [global, trim_all]), State),
    gen_exp(T, NewState, [AccAdd|Acc]);
gen_exp([], _State, Acc) ->
    lists:reverse(parse_tokens(lists:reverse(Acc), start, [])).

parse_line(_Tokens = [Date, Time, TimeMs, <<"new">>, <<"connect(c->s)">>], _) ->
    %%io:format("c2s connect: ~p~n", [Tokens]),
    {c2s_connect, {connect, {Date, Time, TimeMs}}};
parse_line(_Tokens = [_Date, _Time, _TimeMs, _From, <<"server(s->c):">>, _Data], _)  ->
    %%io:format("starting data from server side: ~p~n", [Tokens]),
    {s2c_data, {s2c_data_start}};    
parse_line(_Tokens = [_Date, _Time, _TimeMs, _From, <<"client(c->s):">>, _Data], _)  ->
    %%io:format("starting data from client side: ~p~n", [Tokens]),
    {c22_data, {c2s_data_start}};         
parse_line(_Tokens = [Date, Time, TimeMs, _From, <<"fuzzer(c->s)">>, _State, Data], _)  ->
    %%io:format("starting fuzzer data from client side: ~p~n", [Tokens]),
    {c2s_fuzzer, {c2s_fuzzer, {Date, Time, TimeMs}, Data}};    
parse_line(_Tokens = [Date, Time, TimeMs, _From, <<"fuzzer(s->c)">>, _State, Data], _)  ->
    %%io:format("starting fuzzer data from server side: ~p~n", [Tokens]),
    {s2c_fuzzer, {s2c_fuzzer, {Date, Time, TimeMs}, Data}};     
parse_line(_Tokens = [Date, Time, TimeMs, _From, <<"close">>, <<"(s->c)">>], _) ->
    %%io:format("s2c close: ~p~n", [Tokens]),
    {s2c_close, {server_close, {Date, Time, TimeMs}}}; 
parse_line(_Tokens = [Date, Time, TimeMs, _From, <<"close">>, <<"(c->s)">>], _) ->
    %%io:format("c2s close: ~p~n", [Tokens]),
    {c2s_close, {client_close, {Date, Time, TimeMs}}};      
parse_line(Tokens = [Data], c2s_fuzzer) when length(Tokens) == 1 ->
    %%io:format("get fuzzer data from client side: ~p~n", [Tokens]),
    {c2s_fuzzer, {c2s_fuzzer, Data}};
parse_line(Tokens = [Data], s2c_fuzzer) when length(Tokens) == 1 ->
    %%io:format("get fuzzer data from server side: ~p~n", [Tokens]),
    {s2c_fuzzer, {s2c_fuzzer, Data}}; 
parse_line(Tokens, c2s_data) when length(Tokens) == 1 ->
    %%io:format("get data from client side: ~p~n", [Tokens]),
    {c2s_data, {c2s_data}};
parse_line(Tokens, s2c_data) when length(Tokens) == 1 ->
    %%io:format("get data from server side: ~p~n", [Tokens]),
    {s2c_data, {s2c_data}};        
parse_line(Tokens, _) ->
    io:format("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!unknown data: ~p~n", [Tokens]),
    {undefined, undefined}.

parse_tokens([_H = {c2s_fuzzer, _Time, Data}|T], State, Acc) ->
    io:format("~p~n",[_H]),
    parse_tokens(T, c2s_fuzzer, 
        [Data, <<"fuzz(">>, finish_state(State, c2s_fuzzer) | Acc]);
parse_tokens([_H = {s2c_fuzzer, Time, Data}|T], State, Acc) ->
    io:format("~p~n",[_H]),
    TimeStamp = io_lib:format("%% TS: ~p~n", [Time]),
    parse_tokens(T, s2c_fuzzer, 
        [Data, <<"WriteSocket(">>, 9, list_to_binary(TimeStamp), 9, finish_state(State, s2c_fuzzer) | Acc]);
parse_tokens([_H = {c2s_fuzzer, Data}|T], c2s_fuzzer, Acc) ->
    io:format("~p~n",[_H]),
    parse_tokens(T, c2s_fuzzer, [<<10>>, Data, <<9>> | Acc]);
parse_tokens([_H = {s2c_fuzzer, Data}|T], s2c_fuzzer, Acc) ->
    io:format("~p~n",[_H]),
    parse_tokens(T, s2c_fuzzer, [<<10>>, Data, <<9>> | Acc]);    
parse_tokens([_H|T], State, Acc) -> 
    io:format("~p~n",[_H]),
    parse_tokens(T, State, Acc);
parse_tokens([], _, Acc) -> Acc.



finish_state(c2s_fuzzer, _) ->
    <<", _, WriteSocket) ->", 10>>;
finish_state(s2c_fuzzer, c2s_fuzzer) ->   
    <<");", 10, 10>>;    
finish_state(s2c_fuzzer, _) ->   
    <<"),", 10>>;
finish_state(_, _) -> 
    <<>>.